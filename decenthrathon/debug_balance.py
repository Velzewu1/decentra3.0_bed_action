#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
"""

import pandas as pd
import numpy as np
import hdbscan
from sklearn.metrics import silhouette_score

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
from core.data_processing import process_transaction_data
from utils.helpers import load_transaction_data, setup_logging

setup_logging('INFO')
print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –ù–ï–°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–°–¢–ò –ö–õ–ê–°–¢–ï–†–û–í\n")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df = load_transaction_data('transactions.csv')
features_df, ml_features_processed, _ = process_transaction_data(df)

print(f"üìä –î–∞–Ω–Ω—ã–µ: {ml_features_processed.shape}")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –î–õ–Ø –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–°–¢–ò:")
print("="*70)

balance_results = []

# –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
test_params = [
    # –ú–∞–ª–µ–Ω—å–∫–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã, —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è
    {'min_cluster_size': 50, 'min_samples': 10, 'cluster_selection_epsilon': 0.0},
    {'min_cluster_size': 100, 'min_samples': 20, 'cluster_selection_epsilon': 0.0},
    {'min_cluster_size': 150, 'min_samples': 30, 'cluster_selection_epsilon': 0.0},
    
    # –°—Ä–µ–¥–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
    {'min_cluster_size': 200, 'min_samples': 50, 'cluster_selection_epsilon': 0.0},
    {'min_cluster_size': 300, 'min_samples': 75, 'cluster_selection_epsilon': 0.0},
    
    # –° epsilon –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    {'min_cluster_size': 50, 'min_samples': 10, 'cluster_selection_epsilon': 0.1},
    {'min_cluster_size': 100, 'min_samples': 20, 'cluster_selection_epsilon': 0.2},
    {'min_cluster_size': 150, 'min_samples': 30, 'cluster_selection_epsilon': 0.3},
    
    # Leaf clustering –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    {'min_cluster_size': 100, 'min_samples': 20, 'cluster_selection_epsilon': 0.0, 'cluster_selection_method': 'leaf'},
    {'min_cluster_size': 200, 'min_samples': 40, 'cluster_selection_epsilon': 0.0, 'cluster_selection_method': 'leaf'},
]

for i, params in enumerate(test_params, 1):
    print(f"\nüî¨ –¢–µ—Å—Ç {i}: {params}")
    
    try:
        clusterer = hdbscan.HDBSCAN(
            min_cluster_size=params['min_cluster_size'],
            min_samples=params['min_samples'],
            cluster_selection_epsilon=params.get('cluster_selection_epsilon', 0.0),
            cluster_selection_method=params.get('cluster_selection_method', 'eom')
        )
        
        labels = clusterer.fit_predict(ml_features_processed)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        unique_labels = np.unique(labels)
        n_clusters = len(unique_labels) - (1 if -1 in unique_labels else 0)
        noise_ratio = np.sum(labels == -1) / len(labels)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        cluster_sizes = []
        for label in unique_labels:
            if label != -1:
                size = np.sum(labels == label)
                cluster_sizes.append(size)
        
        if len(cluster_sizes) > 0:
            max_cluster_size = max(cluster_sizes)
            min_cluster_size = min(cluster_sizes)
            balance_ratio = min_cluster_size / max_cluster_size if max_cluster_size > 0 else 0
            largest_cluster_pct = max_cluster_size / len(labels) * 100
            
            print(f"   –ö–ª–∞—Å—Ç–µ—Ä—ã: {n_clusters}")
            print(f"   –®—É–º: {noise_ratio:.1%}")
            print(f"   –†–∞–∑–º–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {sorted(cluster_sizes, reverse=True)}")
            print(f"   –ë–∞–ª–∞–Ω—Å (–º–∏–Ω/–º–∞–∫—Å): {balance_ratio:.3f}")
            print(f"   –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –∫–ª–∞—Å—Ç–µ—Ä: {largest_cluster_pct:.1f}%")
            
            # Silhouette —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
            silhouette = None
            if n_clusters > 1:
                non_noise = labels != -1
                if np.sum(non_noise) > n_clusters:
                    try:
                        silhouette = silhouette_score(ml_features_processed[non_noise], labels[non_noise])
                        print(f"   Silhouette: {silhouette:.3f}")
                    except:
                        print(f"   Silhouette: –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞")
            
            balance_results.append({
                'params': params,
                'n_clusters': n_clusters,
                'noise_ratio': noise_ratio,
                'balance_ratio': balance_ratio,
                'largest_cluster_pct': largest_cluster_pct,
                'silhouette': silhouette,
                'cluster_sizes': cluster_sizes
            })
            
            # –û—Ç–º–µ—á–∞–µ–º —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if largest_cluster_pct < 60 and n_clusters >= 3 and balance_ratio > 0.1:
                print(f"   ‚úÖ –•–û–†–û–®–ò–ô –ë–ê–õ–ê–ù–°!")
        else:
            print(f"   ‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

# –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –±–∞–ª–∞–Ω—Å—É
print(f"\nüèÜ –õ–£–ß–®–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–°–¢–ò:")
print("="*70)

good_results = [r for r in balance_results if r['largest_cluster_pct'] < 60 and r['n_clusters'] >= 3]
good_results.sort(key=lambda x: (x['balance_ratio'], -x['largest_cluster_pct']), reverse=True)

for i, result in enumerate(good_results[:5], 1):
    print(f"\n{i}. –ö–ª–∞—Å—Ç–µ—Ä—ã: {result['n_clusters']}, –ë–∞–ª–∞–Ω—Å: {result['balance_ratio']:.3f}")
    print(f"   –°–∞–º—ã–π –±–æ–ª—å—à–æ–π: {result['largest_cluster_pct']:.1f}%")
    print(f"   –†–∞–∑–º–µ—Ä—ã: {result['cluster_sizes']}")
    print(f"   Silhouette: {result['silhouette']:.3f}" if result['silhouette'] else "   Silhouette: N/A")
    print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {result['params']}")

print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
print("="*50)
print("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å min_cluster_size 100-200 –¥–ª—è –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
print("2. –£–≤–µ–ª–∏—á–∏—Ç—å min_samples –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è")
print("3. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å cluster_selection_epsilon")
print("4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å cluster_selection_method='leaf'")
print("5. –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É") 