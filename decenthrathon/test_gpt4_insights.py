#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π GPT-4 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è insights
"""

import pandas as pd
import numpy as np
import json
from datetime import datetime
from openai import OpenAI
import os
from dotenv import load_dotenv

def test_gpt4_insights():
    print("üß† –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô GPT-4 –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv(dotenv_path='../.env')
    api_key = os.getenv('OPENAI_API_KEY')
    
    print(f"üîë API Key: {api_key[:20]}...")
    
    try:
        client = OpenAI(api_key=api_key)
        
        # –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        segment_stats = {
            "Segment_0": {
                "size": 5,
                "avg_transactions": 44.2,
                "avg_amount": 14914.0,
                "total_revenue": 5100000.0,
                "digital_wallet_ratio": 0.614,
                "international_ratio": 0.0,
                "contactless_ratio": 0.192
            },
            "Segment_4": {
                "size": 1932,
                "avg_transactions": 5962.3,
                "avg_amount": 23034.0,
                "total_revenue": 231385900000.0,
                "digital_wallet_ratio": 0.505,
                "international_ratio": 0.001,
                "contactless_ratio": 0.179
            },
            "Outliers": {
                "size": 52,
                "avg_transactions": 270.1,
                "avg_amount": 31080.0,
                "total_revenue": 1172600000.0,
                "digital_wallet_ratio": 0.325,
                "international_ratio": 0.002,
                "contactless_ratio": 0.202
            }
        }
        
        prompt = f"""
You are a senior banking analyst. Analyze these customer segments and provide:

1. MEANINGFUL NAMES for each segment based on behavior
2. KEY CHARACTERISTICS of each segment  
3. BUSINESS RECOMMENDATIONS (marketing, products, retention)
4. REVENUE OPPORTUNITIES for each segment

Algorithm Used: HDBSCAN_UltraOptimized
Quality Metrics: {{'n_clusters': 5, 'silhouette_score': 0.528, 'noise_ratio': 0.026}}

Segment Statistics:
{json.dumps(segment_stats, indent=2)}

Return structured JSON with format:
{{
    "segment_name": {{
        "business_name": "Meaningful name",
        "description": "Key characteristics", 
        "recommendations": ["action1", "action2", "action3"],
        "revenue_opportunity": "How to monetize"
    }}
}}
"""
        
        print("üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT-4...")
        
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "You are an expert banking analyst specializing in customer segmentation. Return only valid JSON without markdown formatting."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3
        )
        
        print("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT-4")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê
        response_content = response.choices[0].message.content.strip()
        
        print(f"üîç Raw response length: {len(response_content)} chars")
        print(f"üîç Raw response starts with: {response_content[:100]}...")
        
        # Remove markdown code blocks if present
        if response_content.startswith('```json'):
            response_content = response_content[7:]  # Remove ```json
        if response_content.startswith('```'):
            response_content = response_content[3:]   # Remove ```
        if response_content.endswith('```'):
            response_content = response_content[:-3]  # Remove trailing ```
        
        response_content = response_content.strip()
        
        print(f"üîç Cleaned response length: {len(response_content)} chars")
        print(f"üîç Cleaned response starts with: {response_content[:100]}...")
        
        insights = json.loads(response_content)
        
        print("‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(insights)}")
        
        for segment_name, details in insights.items():
            print(f"\nüéØ {segment_name}:")
            print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {details.get('business_name', 'N/A')}")
            print(f"   üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {details.get('description', 'N/A')[:100]}...")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(details.get('recommendations', []))} –ø—É–Ω–∫—Ç–æ–≤")
            
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå JSON –æ—à–∏–±–∫–∞: {e}")
        print(f"üîç –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —á–∞—Å—Ç—å: {response_content[max(0, e.pos-50):e.pos+50]}")
        return False
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_gpt4_insights()
    
    if success:
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: GPT-4 insights —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞") 