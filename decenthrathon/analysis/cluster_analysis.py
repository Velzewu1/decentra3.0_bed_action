#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞
"""

import pandas as pd
import numpy as np
from typing import Dict, List

def analyze_clusters(features_df: pd.DataFrame, labels: np.ndarray) -> Dict:
    """
    –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π
    """
    
    print("üîç –ê–ù–ê–õ–ò–ó –ö–õ–ê–°–¢–ï–†–û–í –ö–õ–ò–ï–ù–¢–û–í")
    print("="*50)
    
    df = features_df.copy()
    df['cluster'] = labels
    
    cluster_profiles = {}
    
    for cluster_id in sorted(df['cluster'].unique()):
        cluster_data = df[df['cluster'] == cluster_id]
        profile = analyze_single_cluster(cluster_data, cluster_id, len(df))
        cluster_profiles[cluster_id] = profile
        
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    comparative_analysis = compare_clusters(cluster_profiles)
    
    # –ë–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    business_recommendations = generate_business_recommendations(cluster_profiles)
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    behavior_forecast = forecast_cluster_behavior(cluster_profiles)
    
    return {
        'cluster_profiles': cluster_profiles,
        'comparative_analysis': comparative_analysis,
        'business_recommendations': business_recommendations,
        'behavior_forecast': behavior_forecast,
        'summary': generate_executive_summary(cluster_profiles)
    }

def analyze_single_cluster(cluster_data: pd.DataFrame, cluster_id: int, total_customers: int) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞"""
    
    size = len(cluster_data)
    percentage = size / total_customers * 100
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics = {
        'size': size,
        'percentage': percentage,
        'avg_amount': cluster_data['avg_amount'].mean(),
        'median_amount': cluster_data['avg_amount'].median(),
        'std_amount': cluster_data['avg_amount'].std(),
        'avg_transactions': cluster_data['tx_count'].mean(),
        'median_transactions': cluster_data['tx_count'].median(),
        'total_volume': cluster_data['total_amount'].sum(),
        'avg_volume_per_customer': cluster_data['total_amount'].mean()
    }
    
    # –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    behavior = {
        'digital_wallet_usage': cluster_data['digital_wallet_ratio'].mean(),
        'contactless_usage': cluster_data['contactless_ratio'].mean(),
        'international_usage': cluster_data['international_ratio'].mean(),
        'weekend_activity': cluster_data['weekend_ratio'].mean(),
        'evening_activity': cluster_data['evening_ratio'].mean(),
        'city_diversity': cluster_data['city_diversity'].mean(),
        'mcc_diversity': cluster_data['mcc_diversity'].mean(),
        'payment_sophistication': cluster_data['payment_sophistication'].mean(),
        'days_active': cluster_data['days_active'].mean(),
        'tx_frequency': cluster_data['tx_frequency'].mean()
    }
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    financial = {
        'clv': cluster_data['customer_lifetime_value'].mean(),
        'amount_volatility': cluster_data['amount_volatility'].mean(),
        'spending_consistency': cluster_data['spending_consistency'].mean(),
        'high_value_ratio': cluster_data['high_value_ratio'].mean(),
        'avg_daily_amount': cluster_data['avg_daily_amount'].mean()
    }
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    temporal = {
        'tx_frequency': cluster_data['tx_frequency'].mean(),
        'holiday_activity': cluster_data['holiday_ratio'].mean(),
        'peak_activity_day': get_peak_activity_day(cluster_data),
        'activity_consistency': calculate_activity_consistency(cluster_data)
    }
    
    # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    geographical = {
        'avg_cities_visited': cluster_data['city_diversity'].mean(),
        'country_diversity': cluster_data['country_diversity'].mean(),
        'travel_intensity': calculate_travel_intensity(cluster_data)
    }
    
    return {
        'id': cluster_id,
        'metrics': metrics,
        'behavior': behavior,
        'financial': financial,
        'temporal': temporal,
        'geographical': geographical,
        'description': generate_cluster_description(cluster_id, metrics, behavior, financial),
        'segment_name': generate_segment_name(cluster_id, metrics, behavior, financial)
    }

def get_peak_activity_day(cluster_data: pd.DataFrame) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω—è –Ω–∞–∏–±–æ–ª—å—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ weekend_ratio
    weekend_ratio = cluster_data['weekend_ratio'].mean()
    if weekend_ratio > 0.3:
        return "–í—ã—Ö–æ–¥–Ω—ã–µ"
    else:
        return "–ë—É–¥–Ω–∏"

def calculate_activity_consistency(cluster_data: pd.DataFrame) -> float:
    """–†–∞—Å—á–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    return 1.0 - cluster_data['amount_volatility'].mean()

def calculate_travel_intensity(cluster_data: pd.DataFrame) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"""
    city_diversity = cluster_data['city_diversity'].mean()
    international_ratio = cluster_data['international_ratio'].mean()
    
    if city_diversity > 15 or international_ratio > 0.1:
        return "–í—ã—Å–æ–∫–∞—è"
    elif city_diversity > 8 or international_ratio > 0.05:
        return "–°—Ä–µ–¥–Ω—è—è"
    else:
        return "–ù–∏–∑–∫–∞—è"

def generate_segment_name(cluster_id: int, metrics: Dict, behavior: Dict, financial: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    avg_amount = metrics['avg_amount']
    digital_usage = behavior['digital_wallet_usage']
    transactions = metrics['avg_transactions']
    sophistication = behavior['payment_sophistication']
    
    if cluster_id == 0:
        if digital_usage > 0.7 and avg_amount > 20000:
            return "–¶–∏—Ñ—Ä–æ–≤—ã–µ –ü—Ä–µ–º–∏—É–º-–∫–ª–∏–µ–Ω—Ç—ã"
        elif digital_usage > 0.6:
            return "–ê–∫—Ç–∏–≤–Ω—ã–µ –¶–∏—Ñ—Ä–æ–≤—ã–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        else:
            return "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ö–ª–∏–µ–Ω—Ç—ã —Å –í—ã—Å–æ–∫–∏–º –û–±–æ—Ä–æ—Ç–æ–º"
    
    elif cluster_id == 1:
        if transactions > 8000 and digital_usage > 0.5:
            return "–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¶–∏—Ñ—Ä–æ–≤—ã–µ –ö–ª–∏–µ–Ω—Ç—ã"
        elif transactions > 5000:
            return "–í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ –¢—Ä–∞–Ω–∑–∞–∫—Ç–æ—Ä—ã"
        else:
            return "–ê–∫—Ç–∏–≤–Ω—ã–µ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –ö–ª–∏–µ–Ω—Ç—ã"
    
    elif cluster_id == 2:
        if avg_amount > 25000 and sophistication > 3.5:
            return "–ü—Ä–µ–º–∏—É–º –ö–ª–∏–µ–Ω—Ç—ã —Å –í—ã—Å–æ–∫–æ–π –õ–æ—è–ª—å–Ω–æ—Å—Ç—å—é"
        elif avg_amount > 20000:
            return "–°–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ö–ª–∏–µ–Ω—Ç—ã"
        else:
            return "–£–º–µ—Ä–µ–Ω–Ω–æ –ê–∫—Ç–∏–≤–Ω—ã–µ –ö–ª–∏–µ–Ω—Ç—ã"
    
    return f"–ö–ª–∞—Å—Ç–µ—Ä {cluster_id}"

def generate_cluster_description(cluster_id: int, metrics: Dict, behavior: Dict, financial: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞"""
    
    size = metrics['size']
    percentage = metrics['percentage']
    avg_amount = metrics['avg_amount']
    avg_tx = metrics['avg_transactions']
    digital_usage = behavior['digital_wallet_usage']
    contactless = behavior['contactless_usage']
    clv = financial['clv']
    
    if cluster_id == 0:
        return f"""
–ö–ª–∞—Å—Ç–µ—Ä {cluster_id} –≤–∫–ª—é—á–∞–µ—Ç {size} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({percentage:.1f}% –æ—Ç –æ–±—â–µ–π –±–∞–∑—ã) –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç 
—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç —Å —Å—Ä–µ–¥–Ω–∏–º —á–µ–∫–æ–º {avg_amount:,.0f} —Ç–µ–Ω–≥–µ –∏ {avg_tx:.0f} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.

–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ({digital_usage:.1%} Digital Wallet)
‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å CLV {clv:,.0f} —Ç–µ–Ω–≥–µ
‚Ä¢ Contactless –ø–ª–∞—Ç–µ–∂–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç {contactless:.1%} –æ—Ç –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

–≠—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ 
—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.
        """
    
    elif cluster_id == 1:
        return f"""
–ö–ª–∞—Å—Ç–µ—Ä {cluster_id} –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç {size} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({percentage:.1f}% –±–∞–∑—ã) - —ç—Ç–æ –≤—ã—Å–æ–∫–æ–∞–∫—Ç–∏–≤–Ω—ã–π 
—Å–µ–≥–º–µ–Ω—Ç —Å {avg_tx:.0f} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–º —á–µ–∫–µ {avg_amount:,.0f} —Ç–µ–Ω–≥–µ.

–û—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–∞–∑–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Digital Wallet ({digital_usage:.1%})
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ adoption contactless —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ({contactless:.1%})
‚Ä¢ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π CLV {clv:,.0f} —Ç–µ–Ω–≥–µ –±–ª–∞–≥–æ–¥–∞—Ä—è —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–≠—Ç–æ "power users" –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥, –∫–æ—Ç–æ—Ä—ã–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ 
–ø–ª–∞—Ç–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
        """
    
    elif cluster_id == 2:
        return f"""
–ö–ª–∞—Å—Ç–µ—Ä {cluster_id} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç {size} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({percentage:.1f}% –±–∞–∑—ã) —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º 
—Å—Ä–µ–¥–Ω–∏–º —á–µ–∫–æ–º {avg_amount:,.0f} —Ç–µ–Ω–≥–µ –ø—Ä–∏ {avg_tx:.0f} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.

–ü—Ä–æ—Ñ–∏–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞:
‚Ä¢ –ù–∞–∏–≤—ã—Å—à–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑–µ
‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è ({digital_usage:.1%} Digital Wallet)
‚Ä¢ –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π CLV {clv:,.0f} —Ç–µ–Ω–≥–µ –∑–∞ —Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ contactless ({contactless:.1%})

–≠—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫—É—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–ª—é—á–µ–≤—ã–º 
–¥–ª—è cross-selling –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
        """
    
    return f"–ö–ª–∞—Å—Ç–µ—Ä {cluster_id}: {size} –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –±–∞–∑–æ–≤—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏."

def compare_clusters(cluster_profiles: Dict) -> Dict:
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
    
    comparison = {
        'size_ranking': [],
        'revenue_ranking': [],
        'digital_adoption_ranking': [],
        'activity_ranking': [],
        'key_differences': {}
    }
    
    # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É
    size_ranking = sorted(cluster_profiles.items(), 
                         key=lambda x: x[1]['metrics']['size'], reverse=True)
    comparison['size_ranking'] = [(k, v['metrics']['size']) for k, v in size_ranking]
    
    # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (CLV)
    revenue_ranking = sorted(cluster_profiles.items(), 
                           key=lambda x: x[1]['financial']['clv'], reverse=True)
    comparison['revenue_ranking'] = [(k, v['financial']['clv']) for k, v in revenue_ranking]
    
    # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –ø—Ä–∏–Ω—è—Ç–∏—é
    digital_ranking = sorted(cluster_profiles.items(), 
                           key=lambda x: x[1]['behavior']['digital_wallet_usage'], reverse=True)
    comparison['digital_adoption_ranking'] = [(k, v['behavior']['digital_wallet_usage']) for k, v in digital_ranking]
    
    # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_ranking = sorted(cluster_profiles.items(), 
                            key=lambda x: x[1]['metrics']['avg_transactions'], reverse=True)
    comparison['activity_ranking'] = [(k, v['metrics']['avg_transactions']) for k, v in activity_ranking]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
    comparison['key_differences'] = {
        'highest_value': max(cluster_profiles.items(), key=lambda x: x[1]['metrics']['avg_amount']),
        'most_active': max(cluster_profiles.items(), key=lambda x: x[1]['metrics']['avg_transactions']),
        'most_digital': max(cluster_profiles.items(), key=lambda x: x[1]['behavior']['digital_wallet_usage']),
        'most_profitable': max(cluster_profiles.items(), key=lambda x: x[1]['financial']['clv'])
    }
    
    return comparison

def generate_business_recommendations(cluster_profiles: Dict) -> Dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞"""
    
    recommendations = {}
    
    for cluster_id, profile in cluster_profiles.items():
        cluster_recs = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
        digital_usage = profile['behavior']['digital_wallet_usage']
        avg_amount = profile['metrics']['avg_amount']
        transactions = profile['metrics']['avg_transactions']
        clv = profile['financial']['clv']
        
        if cluster_id == 0:
            cluster_recs = [
                "üéØ **–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è**: –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ hybrid-—Ä–µ—à–µ–Ω–∏–π (—Ü–∏—Ñ—Ä–æ–≤—ã–µ + —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ)",
                "üí≥ **Cross-selling**: –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                "üì± **–¶–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è**: –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                "üèÜ **–õ–æ—è–ª—å–Ω–æ—Å—Ç—å**: –ü—Ä–æ–≥—Ä–∞–º–º—ã —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏",
                "üìä **KPI —Ñ–æ–∫—É—Å**: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è digital –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ 15-20%"
            ]
        
        elif cluster_id == 1:
            cluster_recs = [
                "üöÄ **–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏**: –ü–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                "üí∞ **–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è**: –ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ premium-–ø–æ–¥–ø–∏—Å–∫–∏",
                "üîÑ **Retention**: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
                "üìà **Up-selling**: –ë–∏–∑–Ω–µ—Å-–∫–∞—Ä—Ç—ã –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                "‚ö° **KPI —Ñ–æ–∫—É—Å**: –ú–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è revenue per user (+25% target)"
            ]
        
        elif cluster_id == 2:
            cluster_recs = [
                "üëë **VIP-—Å–µ—Ä–≤–∏—Å**: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                "üè¶ **Wealth Management**: –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                "üíé **Premium Banking**: Exclusive –∫–∞—Ä—Ç—ã –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏",
                "üåç **–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —É—Å–ª—É–≥–∏**: Travel-–∫–∞—Ä—Ç—ã –∏ –≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                "üìä **KPI —Ñ–æ–∫—É—Å**: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –Ω–∞ 10-15%"
            ]
        
        recommendations[cluster_id] = {
            'segment_name': profile['segment_name'],
            'recommendations': cluster_recs,
            'priority': 'High' if clv > 400000 else 'Medium' if clv > 200000 else 'Standard',
            'investment_level': 'Premium' if avg_amount > 25000 else 'Standard'
        }
    
    return recommendations

def forecast_cluster_behavior(cluster_profiles: Dict) -> Dict:
    """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
    
    forecasts = {}
    
    for cluster_id, profile in cluster_profiles.items():
        
        digital_usage = profile['behavior']['digital_wallet_usage']
        sophistication = profile['behavior']['payment_sophistication']
        consistency = profile['financial']['spending_consistency']
        
        if cluster_id == 0:
            forecast = {
                'growth_potential': '–°—Ä–µ–¥–Ω–∏–π',
                'digital_adoption_forecast': '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 20-30% –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞',
                'revenue_forecast': '–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç 5-10% –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
                'churn_risk': '–ù–∏–∑–∫–∏–π',
                'recommended_focus': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∫ —Ü–∏—Ñ—Ä–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º'
            }
        
        elif cluster_id == 1:
            forecast = {
                'growth_potential': '–í—ã—Å–æ–∫–∏–π',
                'digital_adoption_forecast': '–õ–∏–¥–µ—Ä—ã adoption –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
                'revenue_forecast': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç 15-25% –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º —Ñ–æ–∫—É—Å–µ',
                'churn_risk': '–°—Ä–µ–¥–Ω–∏–π (—Ç—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–Ω–Ω–æ–≤–∞—Ü–∏–π)',
                'recommended_focus': '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ personalization'
            }
        
        elif cluster_id == 2:
            forecast = {
                'growth_potential': '–í—ã—Å–æ–∫–∏–π (–ø–æ value)',
                'digital_adoption_forecast': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏',
                'revenue_forecast': '–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç 8-12% —Å focus –Ω–∞ premium –ø—Ä–æ–¥—É–∫—Ç—ã',
                'churn_risk': '–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π',
                'recommended_focus': 'Wealth management –∏ VIP-—Å–µ—Ä–≤–∏—Å'
            }
        
        forecasts[cluster_id] = forecast
    
    return forecasts

def generate_executive_summary(cluster_profiles: Dict) -> Dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è executive summary –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"""
    
    total_customers = sum(profile['metrics']['size'] for profile in cluster_profiles.values())
    total_revenue = sum(profile['financial']['clv'] * profile['metrics']['size'] 
                       for profile in cluster_profiles.values())
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    most_valuable = max(cluster_profiles.items(), 
                       key=lambda x: x[1]['financial']['clv'])
    largest_segment = max(cluster_profiles.items(), 
                         key=lambda x: x[1]['metrics']['size'])
    most_digital = max(cluster_profiles.items(), 
                      key=lambda x: x[1]['behavior']['digital_wallet_usage'])
    
    summary = {
        'overview': {
            'total_customers': total_customers,
            'total_clusters': len(cluster_profiles),
            'estimated_total_revenue': total_revenue,
            'balance_quality': '–û—Ç–ª–∏—á–Ω–∞—è' if max(p['metrics']['percentage'] for p in cluster_profiles.values()) < 50 else '–•–æ—Ä–æ—à–∞—è'
        },
        'key_insights': [
            f"–ù–∞–∏–±–æ–ª–µ–µ —Ü–µ–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç: {most_valuable[1]['segment_name']} (CLV: {most_valuable[1]['financial']['clv']:,.0f} —Ç–µ–Ω–≥–µ)",
            f"–ö—Ä—É–ø–Ω–µ–π—à–∏–π —Å–µ–≥–º–µ–Ω—Ç: {largest_segment[1]['segment_name']} ({largest_segment[1]['metrics']['percentage']:.1f}% –∫–ª–∏–µ–Ω—Ç–æ–≤)",
            f"–ù–∞–∏–±–æ–ª–µ–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π: {most_digital[1]['segment_name']} ({most_digital[1]['behavior']['digital_wallet_usage']:.1%} Digital Wallet)",
            "–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å",
            "–í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
        ],
        'strategic_priorities': [
            "üéØ –†–∞–∑–≤–∏—Ç–∏–µ digital adoption –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ö",
            "üí∞ –ú–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è revenue –æ—Ç –≤—ã—Å–æ–∫–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
            "üëë Premium-–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–æ—á–µ–∫–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "üîÑ Retention-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞",
            "üìä –í–Ω–µ–¥—Ä–µ–Ω–∏–µ personalized marketing –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"
        ]
    }
    
    return summary 