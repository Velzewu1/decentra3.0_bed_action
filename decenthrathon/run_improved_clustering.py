#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ª—É—á—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import pandas as pd
import numpy as np
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
from core.data_processing import process_transaction_data
from utils.helpers import load_transaction_data, setup_logging, save_dataframe
from reporting.reports import generate_comprehensive_report

setup_logging('INFO')
print("üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–Ø\n")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df = load_transaction_data('transactions.csv')
features_df, ml_features_processed, _ = process_transaction_data(df)

print(f"üìä –î–∞–Ω–Ω—ã–µ: {ml_features_processed.shape}")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∏ –ª—É—á—à–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞
algorithms_to_test = [
    {
        'name': 'GMM_balanced_3clusters',
        'algorithm': GaussianMixture(n_components=3, random_state=42),
        'description': 'Gaussian Mixture Model —Å 3 —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏'
    },
    {
        'name': 'KMeans_balanced_7clusters', 
        'algorithm': KMeans(n_clusters=7, random_state=42, n_init=10),
        'description': 'K-Means —Å 7 —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏'
    },
    {
        'name': 'KMeans_balanced_5clusters',
        'algorithm': KMeans(n_clusters=5, random_state=42, n_init=10),
        'description': 'K-Means —Å 5 –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)'
    }
]

results = {}

print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–£–ß–®–ò–• –ê–õ–ì–û–†–ò–¢–ú–û–í:")
print("="*60)

for test in algorithms_to_test:
    print(f"\nüî¨ {test['description']}")
    
    # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    labels = test['algorithm'].fit_predict(ml_features_processed)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    unique_labels = np.unique(labels)
    n_clusters = len(unique_labels)
    
    # –†–∞–∑–º–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    cluster_sizes = []
    for label in unique_labels:
        size = np.sum(labels == label)
        cluster_sizes.append(size)
    
    max_size = max(cluster_sizes)
    min_size = min(cluster_sizes)
    balance_ratio = min_size / max_size
    largest_pct = max_size / len(labels) * 100
    
    # Silhouette score
    silhouette = silhouette_score(ml_features_processed, labels)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results[test['name']] = {
        'labels': labels,
        'clusterer': test['algorithm'],
        'params': {'algorithm': test['name']},
        'metrics': {
            'n_clusters': n_clusters,
            'noise_ratio': 0.0,  # –ù–µ—Ç —à—É–º–∞ –≤ K-Means/GMM
            'silhouette': silhouette,
            'balance_ratio': balance_ratio,
            'largest_cluster_pct': largest_pct,
            'cluster_sizes': sorted(cluster_sizes, reverse=True)
        },
        'algorithm_name': test['description']
    }
    
    print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"      –ö–ª–∞—Å—Ç–µ—Ä—ã: {n_clusters}")
    print(f"      –†–∞–∑–º–µ—Ä—ã: {sorted(cluster_sizes, reverse=True)}")
    print(f"      –ë–∞–ª–∞–Ω—Å (–º–∏–Ω/–º–∞–∫—Å): {balance_ratio:.3f}")
    print(f"      –°–∞–º—ã–π –±–æ–ª—å—à–æ–π: {largest_pct:.1f}%")
    print(f"      Silhouette: {silhouette:.3f}")

# –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print(f"\nüèÜ –í–´–ë–û–† –õ–£–ß–®–ï–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê:")
print("="*50)

# –ö—Ä–∏—Ç–µ—Ä–∏–∏: –±–∞–ª–∞–Ω—Å > 0.2 –∏ —Ö–æ—Ä–æ—à–∏–π silhouette
best_algorithm = None
best_score = 0

for name, result in results.items():
    metrics = result['metrics']
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π score: –±–∞–ª–∞–Ω—Å + silhouette
    combined_score = metrics['balance_ratio'] * 0.6 + metrics['silhouette'] * 0.4
    
    print(f"{name}: –±–∞–ª–∞–Ω—Å={metrics['balance_ratio']:.3f}, "
          f"silhouette={metrics['silhouette']:.3f}, "
          f"combined={combined_score:.3f}")
    
    if combined_score > best_score:
        best_score = combined_score
        best_algorithm = name

print(f"\nüéØ –í–´–ë–†–ê–ù: {best_algorithm}")
best_result = results[best_algorithm]
best_labels = best_result['labels']
best_metrics = best_result['metrics']

print(f"   üìä {best_metrics['n_clusters']} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
print(f"   üìà –†–∞–∑–º–µ—Ä—ã: {best_metrics['cluster_sizes']}")
print(f"   ‚öñÔ∏è  –ë–∞–ª–∞–Ω—Å: {best_metrics['balance_ratio']:.3f}")
print(f"   üìè Silhouette: {best_metrics['silhouette']:.3f}")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –∫ features
features_df['segment'] = best_labels

# –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
print(f"\nüìä –ê–ù–ê–õ–ò–ó –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–• –ö–õ–ê–°–¢–ï–†–û–í:")
print("="*50)

cluster_summary = []
for cluster_id in sorted(np.unique(best_labels)):
    cluster_data = features_df[features_df['segment'] == cluster_id]
    
    summary = {
        'segment': cluster_id,
        'segment_name': f'Cluster_{cluster_id}',
        'size': len(cluster_data),
        'percentage': len(cluster_data) / len(features_df) * 100,
        'avg_amount': cluster_data['avg_amount'].mean(),
        'avg_transactions': cluster_data['tx_count'].mean(),
        'digital_wallet_ratio': cluster_data['digital_wallet_ratio'].mean(),
        'contactless_ratio': cluster_data['contactless_ratio'].mean(),
        'international_ratio': cluster_data['international_ratio'].mean(),
        'city_diversity': cluster_data['city_diversity'].mean(),
        'payment_sophistication': cluster_data['payment_sophistication'].mean()
    }
    
    cluster_summary.append(summary)
    
    print(f"\nüéØ –ö–õ–ê–°–¢–ï–† {cluster_id}:")
    print(f"   üë• –†–∞–∑–º–µ—Ä: {summary['size']} ({summary['percentage']:.1f}%)")
    print(f"   üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {summary['avg_amount']:,.0f} —Ç–µ–Ω–≥–µ")
    print(f"   üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {summary['avg_transactions']:.0f}")
    print(f"   üì± Digital Wallet: {summary['digital_wallet_ratio']:.1%}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print(f"\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
print("="*40)

# –°–æ–∑–¥–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å reporting
algorithm_results = {best_algorithm: best_result}

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
final_report = generate_comprehensive_report(
    features_df, best_labels, ml_features_processed, algorithm_results
)

print(f"‚úÖ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
print(f"   üìã customer_segments_balanced.csv")
print(f"   üìã customer_segments_balanced.parquet") 
print(f"   üìã hackathon_balanced_results.json")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
features_df.to_csv('customer_segments_balanced.csv', index=False)
features_df.to_parquet('customer_segments_balanced.parquet', index=False)

# –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
comparison = {
    'original_unbalanced': {
        'clusters': 3,
        'largest_cluster_pct': 97.2,
        'balance_ratio': 0.004,  # 4/1945
        'silhouette': 0.505
    },
    'improved_balanced': {
        'clusters': best_metrics['n_clusters'],
        'largest_cluster_pct': best_metrics['largest_cluster_pct'],
        'balance_ratio': best_metrics['balance_ratio'],
        'silhouette': best_metrics['silhouette']
    }
}

with open('clustering_comparison.json', 'w') as f:
    json.dump(comparison, f, indent=2)

print(f"\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –° –û–†–ò–ì–ò–ù–ê–õ–û–ú:")
print("="*40)
print(f"–û—Ä–∏–≥–∏–Ω–∞–ª: 3 –∫–ª–∞—Å—Ç–µ—Ä–∞, –±–∞–ª–∞–Ω—Å=0.004, –º–∞–∫—Å=97.2%, silhouette=0.505")
print(f"–£–ª—É—á—à–µ–Ω–Ω—ã–π: {best_metrics['n_clusters']} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, "
      f"–±–∞–ª–∞–Ω—Å={best_metrics['balance_ratio']:.3f}, "
      f"–º–∞–∫—Å={best_metrics['largest_cluster_pct']:.1f}%, "
      f"silhouette={best_metrics['silhouette']:.3f}")

print(f"\nüéâ –£–õ–£–ß–®–ï–ù–ò–Ø –î–û–°–¢–ò–ì–ù–£–¢–´!")
print(f"‚úÖ –ë–∞–ª–∞–Ω—Å —É–ª—É—á—à–µ–Ω –≤ {best_metrics['balance_ratio']/0.004:.0f}x —Ä–∞–∑")
print(f"‚úÖ –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –∫–ª–∞—Å—Ç–µ—Ä —É–º–µ–Ω—å—à–µ–Ω —Å 97.2% –¥–æ {best_metrics['largest_cluster_pct']:.1f}%")
print(f"‚úÖ –í—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞") 