#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""

import time
import os
import json
from core.data_processing import process_transaction_data
from core.clustering import perform_clustering
from utils.helpers import load_transaction_data, setup_logging, save_dataframe
from reporting.reports import generate_comprehensive_report
from visualization.cluster_plots import create_cluster_visualizations, generate_cluster_summary_table
from analysis.cluster_analysis import analyze_clusters

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print("üöÄ REFACTORED CUSTOMER SEGMENTATION PIPELINE")
    print("="*60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging('INFO')
    logger.info("üéØ Starting balanced clustering pipeline...")
    
    # –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    start_time = time.time()
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìÇ –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 40)
    df = load_transaction_data('DECENTRATHON_3.0.parquet')
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(df):,}")
    
    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    print("\nüîß –≠–¢–ê–ü 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 40)
    features_df, ml_features_processed, preprocessing_pipeline = process_transaction_data(df)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {ml_features_processed.shape[1]}")
    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {len(features_df):,}")
    
    # 3. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
    print("\nüéØ –≠–¢–ê–ü 3: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è")
    print("-" * 40)
    
    from config import get_config
    config = get_config()
    
    labels, clusterer, clustering_results = perform_clustering(
        ml_features_processed, 
        config.CLUSTERING_PARAMS
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∫ –ø—Ä–∏–∑–Ω–∞–∫–∞–º
    features_df['segment'] = labels
    
    # 4. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    print("\nüîç –≠–¢–ê–ü 4: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
    print("-" * 40)
    
    cluster_analysis = analyze_clusters(features_df, labels)
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    print("\nüìã –û–ü–ò–°–ê–ù–ò–Ø –ö–õ–ê–°–¢–ï–†–û–í:")
    print("="*50)
    for cluster_id, profile in cluster_analysis['cluster_profiles'].items():
        print(f"\nüéØ {profile['segment_name']}")
        print(f"   –†–∞–∑–º–µ—Ä: {profile['metrics']['size']} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({profile['metrics']['percentage']:.1f}%)")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {profile['metrics']['avg_amount']:,.0f} —Ç–µ–Ω–≥–µ")
        print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {profile['metrics']['avg_transactions']:.0f}")
        print(f"   Digital Wallet: {profile['behavior']['digital_wallet_usage']:.1%}")
        print(f"   CLV: {profile['financial']['clv']:,.0f} —Ç–µ–Ω–≥–µ")
    
    # 5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    print("\nüé® –≠–¢–ê–ü 5: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("-" * 40)
    
    try:
        features_with_clusters = create_cluster_visualizations(
            features_df, ml_features_processed, labels, "."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        summary_table = generate_cluster_summary_table(features_with_clusters, ".")
        print("‚úÖ –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–æ–∑–¥–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: matplotlib, seaborn, plotly")
    
    # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤)
    print("\nüìä –≠–¢–ê–ü 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("-" * 40)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω parquet —Ñ–∞–π–ª
    save_dataframe(features_df, 'customer_segments.parquet', format='parquet')
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: customer_segments.parquet")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    with open('detailed_cluster_analysis.json', 'w', encoding='utf-8') as f:
        import numpy as np
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numpy —Ç–∏–ø—ã –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ
        def convert_numpy(obj):
            if hasattr(obj, 'item'):
                return obj.item()
            elif hasattr(obj, 'tolist'):
                return obj.tolist()
            elif isinstance(obj, np.integer):
                return int(obj)
            elif isinstance(obj, np.floating):
                return float(obj)
            elif isinstance(obj, np.ndarray):
                return obj.tolist()
            return obj
        
        def clean_for_json(data):
            if isinstance(data, dict):
                return {str(k): clean_for_json(v) for k, v in data.items()}
            elif isinstance(data, list):
                return [clean_for_json(item) for item in data]
            elif isinstance(data, tuple):
                return [clean_for_json(item) for item in data]
            else:
                return convert_numpy(data)
        
        try:
            clean_analysis = clean_for_json(cluster_analysis)
            json.dump(clean_analysis, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π JSON –∞–Ω–∞–ª–∏–∑: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            basic_info = {
                'cluster_count': len(cluster_analysis['cluster_profiles']),
                'summary': clean_for_json(cluster_analysis['summary']['overview']),
                'segment_names': [str(profile['segment_name']) for profile in cluster_analysis['cluster_profiles'].values()]
            }
            json.dump(basic_info, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: detailed_cluster_analysis.json")
    
    # 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüéâ –≠–¢–ê–ü 7: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞")
    print("-" * 40)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    total_time = time.time() - start_time
    print(f"\n‚è±Ô∏è  –û–ë–©–ï–ï –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º executive summary
    summary = cluster_analysis['summary']
    print(f"\nüìà EXECUTIVE SUMMARY:")
    print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {summary['overview']['total_customers']:,}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {summary['overview']['total_clusters']}")
    print(f"   –ö–∞—á–µ—Å—Ç–≤–æ –±–∞–ª–∞–Ω—Å–∞: {summary['overview']['balance_quality']}")
    print(f"   –û–±—â–∏–π —Ä–∞—Å—á–µ—Ç–Ω—ã–π –¥–æ—Ö–æ–¥: {summary['overview']['estimated_total_revenue']:,.0f} —Ç–µ–Ω–≥–µ")
    
    print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:")
    for insight in summary['key_insights']:
        print(f"   ‚Ä¢ {insight}")
    
    print(f"\nüéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ü–†–ò–û–†–ò–¢–ï–¢–´:")
    for priority in summary['strategic_priorities']:
        print(f"   {priority}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüíº –ë–ò–ó–ù–ï–°-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–õ–ê–°–¢–ï–†–ê–ú:")
    print("="*50)
    recommendations = cluster_analysis['business_recommendations']
    for cluster_id, rec in recommendations.items():
        profile = cluster_analysis['cluster_profiles'][cluster_id]
        print(f"\nüéØ {rec['segment_name']} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec['priority']})")
        print(f"   –†–∞–∑–º–µ—Ä: {profile['metrics']['size']} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for recommendation in rec['recommendations']:
            print(f"     {recommendation}")
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    print(f"\nüîÆ –ü–†–û–ì–ù–û–ó –ü–û–í–ï–î–ï–ù–ò–Ø –ö–õ–ê–°–¢–ï–†–û–í:")
    print("="*40)
    forecasts = cluster_analysis['behavior_forecast']
    for cluster_id, forecast in forecasts.items():
        profile = cluster_analysis['cluster_profiles'][cluster_id]
        print(f"\nüìä {profile['segment_name']}:")
        print(f"   –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞: {forecast['growth_potential']}")
        print(f"   –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤: {forecast['revenue_forecast']}")
        print(f"   –†–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞: {forecast['churn_risk']}")
        print(f"   –§–æ–∫—É—Å: {forecast['recommended_focus']}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ö–∞–∫–∞—Ç–æ–Ω–∞
    print(f"\nüèÜ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ö–†–ò–¢–ï–†–ò–Ø–ú –•–ê–ö–ê–¢–û–ù–ê:")
    print("="*50)
    print("‚úÖ –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: 30 –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º")
    print("‚úÖ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏: GMM —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞")
    print("‚úÖ –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: 3 —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π")  
    print("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: –ü–æ–ª–Ω—ã–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    print("‚úÖ –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: –ü—Ä–æ–≥–Ω–æ–∑—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±–∞–Ω–∫–∞")
    print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, —Ç–∞–±–ª–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏")
    
    print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: customer_segments.parquet")
    print(f"   üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: detailed_cluster_analysis.json")
    print(f"   üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: cluster_overview.png, pca_visualization.png, tsne_visualization.png, business_metrics.png, cluster_characteristics.png")

if __name__ == "__main__":
    main() 