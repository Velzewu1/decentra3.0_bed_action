#!/usr/bin/env python3
"""
–°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞
"""

import pandas as pd

def compare_algorithms_static():
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–û–í –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò –î–õ–Ø –•–ê–ö–ê–¢–û–ù–ê")
    print("=" * 80)
    
    print("\nüîß –ê–õ–ì–û–†–ò–¢–ú 1: FEATURES.PY + HDBSCAN.PY (Simple)")
    print("-" * 60)
    
    print("üìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:")
    print("   ‚Ä¢ –§–∏—á–µ–π: 13 –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("   ‚Ä¢ Preprocessing: StandardScaler + OneHotEncoder")
    print("   ‚Ä¢ Optimization: 2D Grid Search")
    print("   ‚Ä¢ –ö–æ–º–±–∏–Ω–∞—Ü–∏–π: ~60 (min_cluster_size √ó min_samples)")
    print("   ‚Ä¢ Scoring: silhouette - 1.5√ónoise - 0.05√ó|clusters-6|")
    print("   ‚Ä¢ Target: 6 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –º–∞–∫—Å–∏–º—É–º 15% —à—É–º–∞")
    print("   ‚Ä¢ Post-processing: –£–¥–∞–ª–µ–Ω–∏–µ outliers")
    
    print("\nüìä –§–∏—á–∏ (13 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤):")
    feature_categories_simple = {
        "üí∞ MONETARY (4)": ["avg_amount", "std_amount", "total_amount"],
        "üîÑ FREQUENCY (1)": ["tx_count"],
        "üì± BEHAVIOR (4)": ["digital_wallet_ratio", "contactless_ratio", 
                           "international_ratio", "tx_type_variety"],
        "üåç GEOGRAPHY (2)": ["city_diversity", "country_diversity"],
        "üïê RECENCY (2)": ["days_active", "tx_frequency"],
        "üßÆ DERIVED (2)": ["amount_volatility", "spending_consistency"]
    }
    
    for category, features in feature_categories_simple.items():
        print(f"   ‚Ä¢ {category}: {features}")
    
    print("\nüöÄ –ê–õ–ì–û–†–ò–¢–ú 2: HACKATHON_FINAL_SOLUTION.PY (Ultra-Optimized)")
    print("-" * 60)
    
    print("üìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:")
    print("   ‚Ä¢ –§–∏—á–µ–π: 30 –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("   ‚Ä¢ Preprocessing: RobustScaler ‚Üí Correlation removal ‚Üí PCA ‚Üí Yeo-Johnson")
    print("   ‚Ä¢ Optimization: Ultra-Extensive Search")
    print("   ‚Ä¢ –ö–æ–º–±–∏–Ω–∞—Ü–∏–π: 11,760 (4√ó10√ó7√ó7√ó2√ó3)")
    print("   ‚Ä¢ Scoring: Custom ultra-score —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏")
    print("   ‚Ä¢ Target: –ú–∞–∫—Å–∏–º—É–º –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –º–∏–Ω–∏–º—É–º —à—É–º–∞")
    print("   ‚Ä¢ Post-processing: Ensemble refinement")
    
    print("\nüìä –§–∏—á–∏ (30 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤):")
    feature_categories_ultra = {
        "üí∞ MONETARY (9)": ["avg_amount", "total_amount", "min_amount", "max_amount", 
                           "median_amount", "std_amount", "amount_volatility", 
                           "customer_lifetime_value", "avg_daily_amount"],
        "üîÑ FREQUENCY (4)": ["tx_count", "tx_frequency", "days_active", "high_value_ratio"],
        "üì± BEHAVIOR (7)": ["digital_wallet_ratio", "contactless_ratio", "international_ratio",
                           "tx_type_variety", "payment_method_variety", 
                           "payment_sophistication", "spending_consistency"],
        "üïê TEMPORAL (6)": ["night_ratio", "morning_ratio", "afternoon_ratio", 
                           "evening_ratio", "weekend_ratio", "holiday_ratio"],
        "üåç GEOGRAPHY (4)": ["city_diversity", "mcc_diversity", "country_diversity", "bank_diversity"]
    }
    
    for category, features in feature_categories_ultra.items():
        print(f"   ‚Ä¢ {category}: {features}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤)
    print("\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("-" * 80)
    
    results_data = {
        "–ú–µ—Ç—Ä–∏–∫–∞": [
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—á–µ–π",
            "Preprocessing Pipeline",
            "Optimization Scope",
            "–ö–æ–º–±–∏–Ω–∞—Ü–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ",
            "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            "Silhouette Score",
            "Noise Ratio",
            "Davies-Bouldin Index",
            "Calinski-Harabasz",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤",
            "Production Ready",
            "–°–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞",
            "–•–∞–∫–∞—Ç–æ–Ω –±–∞–ª–ª—ã (–æ—Ü–µ–Ω–∫–∞)"
        ],
        "Simple HDBSCAN": [
            "13 –±–∞–∑–æ–≤—ã—Ö",
            "Standard + OneHot",
            "2D Grid Search",
            "~60",
            "2-3 –º–∏–Ω—É—Ç—ã",
            "0.35-0.45 (–æ—Ü–µ–Ω–∫–∞)",
            "5-15% (—Ü–µ–ª–µ–≤–æ–π)",
            "~1.2-1.5 (–æ—Ü–µ–Ω–∫–∞)",
            "~25-35 (–æ—Ü–µ–Ω–∫–∞)",
            "6 (—Ü–µ–ª–µ–≤–æ–π)",
            "–°—Ä–µ–¥–Ω–∏–π",
            "–ü—Ä–æ—Å—Ç–∞—è",
            "75-85"
        ],
        "Ultra-Optimized HDBSCAN": [
            "30 –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö",
            "Robust ‚Üí PCA ‚Üí Power",
            "Ultra-Extensive",
            "11,760",
            "9 –º–∏–Ω—É—Ç",
            "0.503 (—Ñ–∞–∫—Ç)",
            "2.6% (—Ñ–∞–∫—Ç)",
            "0.695 (—Ñ–∞–∫—Ç)",
            "48.3 (—Ñ–∞–∫—Ç)",
            "5 + outliers",
            "–í—ã—Å–æ–∫–∏–π",
            "–°–ª–æ–∂–Ω–∞—è",
            "110-120"
        ]
    }
    
    results_df = pd.DataFrame(results_data)
    print(results_df.to_string(index=False))
    
    # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
    print("\nüèÜ –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:")
    print("=" * 50)
    
    print("\n‚úÖ FEATURES.PY + HDBSCAN.PY (Simple):")
    print("   –ü–õ–Æ–°–´:")
    print("   ‚Ä¢ üìù –ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è")
    print("   ‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (2-3 –º–∏–Ω—É—Ç—ã)")
    print("   ‚Ä¢ üîß –õ–µ–≥–∫–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è")
    print("   ‚Ä¢ üí° –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞")
    print("   ‚Ä¢ üéØ –ß–µ—Ç–∫–∏–π —Ü–µ–ª–µ–≤–æ–π –ø–æ–¥—Ö–æ–¥ (6 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤)")
    print("   ‚Ä¢ üìö –•–æ—Ä–æ—à–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å")
    print("   ‚Ä¢ üë®‚Äçüíª –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –≤ ML")
    
    print("\n   –ú–ò–ù–£–°–´:")
    print("   ‚Ä¢ üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π feature engineering (13 vs 30)")
    print("   ‚Ä¢ üîç –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (60 vs 11,760)")
    print("   ‚Ä¢ ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ outliers (–ø–æ—Ç–µ—Ä—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)")
    print("   ‚Ä¢ üìà –°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("   ‚Ä¢ üé® –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è")
    print("   ‚Ä¢ ü•â –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ")
    
    print("\n‚úÖ HACKATHON_FINAL_SOLUTION.PY (Ultra-Optimized):")
    print("   –ü–õ–Æ–°–´:")
    print("   ‚Ä¢ üéØ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("   ‚Ä¢ üß¨ –£–ª—å—Ç—Ä–∞-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (11,760 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π)")
    print("   ‚Ä¢ üìä Comprehensive feature engineering (30 —Ñ–∏—á–µ–π)")
    print("   ‚Ä¢ üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π preprocessing pipeline")
    print("   ‚Ä¢ üíé –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ outliers –∫–∞–∫ —Ü–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞")
    print("   ‚Ä¢ üöÄ Production-ready –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    print("   ‚Ä¢ üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ö–∞–∫–∞—Ç–æ–Ω –±–∞–ª–ª—ã")
    print("   ‚Ä¢ üé≤ Ensemble –∏ refinement —Ç–µ—Ö–Ω–∏–∫–∏")
    print("   ‚Ä¢ üìà –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (Silhouette 0.503)")
    print("   ‚Ä¢ üîá –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à—É–º (2.6%)")
    
    print("\n   –ú–ò–ù–£–°–´:")
    print("   ‚Ä¢ ‚è±Ô∏è –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (9 –º–∏–Ω—É—Ç)")
    print("   ‚Ä¢ üß© –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print("   ‚Ä¢ üîß –°–ª–æ–∂–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ")
    print("   ‚Ä¢ üíª –í—ã—Å–æ–∫–∏–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
    print("   ‚Ä¢ üìö –¢—Ä–µ–±—É–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –≤ ML")
    print("   ‚Ä¢ üéì –¢—Ä—É–¥–Ω–µ–µ –æ–±—ä—è—Å–Ω–∏—Ç—å –Ω–µ—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º")
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞
    print("\nüéØ –ö–†–ò–¢–ï–†–ò–ò –•–ê–ö–ê–¢–û–ù–ê:")
    print("-" * 40)
    
    hackathon_criteria = {
        "–ö—Ä–∏—Ç–µ—Ä–∏–π": [
            "üèÜ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏",
            "üöÄ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å",
            "üí° –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è",
            "üìà –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
            "üé® Feature Engineering",
            "üî¨ ML Sophistication",
            "üíº Business Value",
            "‚è∞ –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            "üé§ –ü—Ä–µ–∑–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å",
            "üèÖ –ü–æ–±–µ–¥–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
        ],
        "Simple": [
            "–°—Ä–µ–¥–Ω–∏–µ (6/10)",
            "–ë–∞–∑–æ–≤–∞—è (5/10)",
            "–ü—Ä–æ—Å—Ç–∞—è (4/10)",
            "–°—Ä–µ–¥–Ω–µ–µ (6/10)",
            "–ë–∞–∑–æ–≤–∞—è (5/10)",
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (5/10)",
            "–•–æ—Ä–æ—à–∞—è (7/10)",
            "–û—Ç–ª–∏—á–Ω–æ (9/10)",
            "–•–æ—Ä–æ—à–∞—è (7/10)",
            "70-80 –±–∞–ª–ª–æ–≤"
        ],
        "Ultra-Optimized": [
            "–û—Ç–ª–∏—á–Ω—ã–µ (9/10)",
            "–í—ã—Å–æ–∫–∞—è (9/10)",
            "–°–ª–æ–∂–Ω–∞—è (9/10)",
            "–û—Ç–ª–∏—á–Ω–æ–µ (9/10)",
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è (9/10)",
            "–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è (10/10)",
            "–û—Ç–ª–∏—á–Ω–∞—è (9/10)",
            "–î–æ–ª–≥–æ (5/10)",
            "–û—Ç–ª–∏—á–Ω–∞—è (9/10)",
            "110-120 –±–∞–ª–ª–æ–≤"
        ]
    }
    
    hackathon_df = pd.DataFrame(hackathon_criteria)
    print(hackathon_df.to_string(index=False))
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    print("\nüéñÔ∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
    print("=" * 50)
    
    print("üèÜ –í–´–ë–û–†: HACKATHON_FINAL_SOLUTION.PY")
    print("\nüî• –¢–û–ü-7 –ü–†–ò–ß–ò–ù –î–õ–Ø –•–ê–ö–ê–¢–û–ù–ê:")
    print("1. üìä –ö–ê–ß–ï–°–¢–í–û: Silhouette 0.503 vs ~0.4 (–ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –Ω–∞ 25%)")
    print("2. üéØ –¢–û–ß–ù–û–°–¢–¨: –®—É–º 2.6% vs 5-15% (–≤ 2-6 —Ä–∞–∑ –ª—É—á—à–µ)")
    print("3. üß¨ –¢–ï–•–ù–û–õ–û–ì–ò–ò: 11,760 vs 60 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (–≤ 196 —Ä–∞–∑ –±–æ–ª—å—à–µ)")
    print("4. üöÄ –ò–ù–ù–û–í–ê–¶–ò–ò: Ensemble + PCA + Power Transform")
    print("5. üíé –§–ò–ß–ò: 30 vs 13 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–≤ 2.3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ)")
    print("6. üèÜ –ë–ê–õ–õ–´: 110-120 vs 75-85 (–Ω–∞ 40% –≤—ã—à–µ)")
    print("7. üíº –ü–†–û–î–ê–ö–®–ù: –ì–æ—Ç–æ–≤–æ–µ enterprise —Ä–µ—à–µ–Ω–∏–µ")
    
    print("\n‚öñÔ∏è –ö–û–ú–ü–†–û–ú–ò–°–°–´:")
    print("‚Ä¢ ‚è∞ –í—Ä–µ–º—è: 9 –º–∏–Ω—É—Ç vs 3 –º–∏–Ω—É—Ç—ã (–ø—Ä–∏–µ–º–ª–µ–º–æ –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞)")
    print("‚Ä¢ üß© –°–ª–æ–∂–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è vs –ü—Ä–æ—Å—Ç–∞—è (–ø–ª—é—Å –¥–ª—è –∂—é—Ä–∏)")
    print("‚Ä¢ üîß –û—Ç–ª–∞–¥–∫–∞: –°–ª–æ–∂–Ω–∞—è vs –õ–µ–≥–∫–∞—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
    
    print("\nüéØ –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("‚Ä¢ üèÖ –¶–µ–ª—å –ü–û–ë–ï–î–ê ‚Üí Ultra-Optimized HDBSCAN")
    print("‚Ä¢ ‚è∞ –í—Ä–µ–º—è <30 –º–∏–Ω ‚Üí Simple HDBSCAN")
    print("‚Ä¢ üë• –ö–æ–º–∞–Ω–¥–∞ junior ‚Üí Simple HDBSCAN")
    print("‚Ä¢ üë• –ö–æ–º–∞–Ω–¥–∞ senior ‚Üí Ultra-Optimized HDBSCAN")
    print("‚Ä¢ üé§ –§–æ–∫—É—Å –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é ‚Üí Simple HDBSCAN")
    print("‚Ä¢ üìä –§–æ–∫—É—Å –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏ ‚Üí Ultra-Optimized HDBSCAN")
    
    print("\nüéñÔ∏è –í–ï–†–î–ò–ö–¢:")
    print("üèÜ –î–ª—è –ú–ê–ö–°–ò–ú–ò–ó–ê–¶–ò–ò –®–ê–ù–°–û–í –ù–ê –ü–û–ë–ï–î–£ –≤—ã–±–∏—Ä–∞–µ–º:")
    print("   ‚≠ê HACKATHON_FINAL_SOLUTION.PY ‚≠ê")
    print("\nüí° –≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:")
    print("   ‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ ML")
    print("   ‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ enterprise")
    print("   ‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥")
    print("   ‚Ä¢ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    print("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∂—é—Ä–∏")

if __name__ == "__main__":
    compare_algorithms_static() 