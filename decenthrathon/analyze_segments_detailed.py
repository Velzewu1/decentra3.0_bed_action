#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ hdbscan.py –∏ features.py
"""

import pandas as pd
import numpy as np

def analyze_detailed_segments():
    print('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ï–ì–ú–ï–ù–¢–û–í –ü–û HDBSCAN.PY + FEATURES.PY')
    print('=' * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_parquet('customer_segments.parquet')
    
    print(f'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(df)} –∫–ª–∏–µ–Ω—Ç–æ–≤, {len(df.columns)-2} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
    print(f'üéØ –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(df["segment"].unique())}')
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    for segment_id in sorted(df['segment'].unique()):
        segment_data = df[df['segment'] == segment_id]
        size = len(segment_data)
        percentage = size / len(df) * 100
        
        print(f'\nüìä –°–ï–ì–ú–ï–ù–¢ {segment_id}:')
        print(f'   üë• –†–∞–∑–º–µ—Ä: {size} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({percentage:.1f}%)')
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ features.py
        print(f'   üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {segment_data["avg_amount"].mean():.0f} KZT')
        print(f'   üîÑ –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {segment_data["tx_count"].mean():.0f}')
        print(f'   üíé –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {segment_data["total_amount"].sum()/1e9:.3f} –º–ª—Ä–¥ KZT')
        print(f'   üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∞—Ç: {segment_data["amount_volatility"].mean():.3f}')
        print(f'   üéØ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∞—Ç: {segment_data["spending_consistency"].mean():.3f}')
        
        # –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        print(f'   üì± Digital wallet ratio: {segment_data["digital_wallet_ratio"].mean()*100:.1f}%')
        print(f'   üí≥ Contactless ratio: {segment_data["contactless_ratio"].mean()*100:.1f}%')
        print(f'   üåç International ratio: {segment_data["international_ratio"].mean()*100:.2f}%')
        print(f'   üè™ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {segment_data["tx_type_variety"].mean():.1f}')
        
        # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        print(f'   üèôÔ∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ (–≥–æ—Ä–æ–¥–∞): {segment_data["city_diversity"].mean():.1f}')
        print(f'   üåç –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å—Ç—Ä–∞–Ω: {segment_data["country_diversity"].mean():.1f}')
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        print(f'   üìÖ –î–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {segment_data["days_active"].mean():.0f}')
        print(f'   ‚ö° –ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {segment_data["tx_frequency"].mean():.2f}/–¥–µ–Ω—å')
        
        # –ë–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
        if segment_id == -1:
            interpretation = "üö® OUTLIERS - –ê–Ω–æ–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        elif segment_id == 4:
            interpretation = "üè¢ MASS MARKET - –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞ –±–∞–Ω–∫–∞"
        elif segment_data["digital_wallet_ratio"].mean() > 0.6:
            interpretation = "üì± DIGITAL NATIVES - –í—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        elif segment_data["avg_amount"].mean() > 30000:
            interpretation = "üíé PREMIUM - –í—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
        elif segment_data["international_ratio"].mean() > 0.01:
            interpretation = "üåç INTERNATIONAL - –ö–ª–∏–µ–Ω—Ç—ã —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"
        else:
            interpretation = f"üîç NICHE SEGMENT - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞"
        
        print(f'   üéØ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {interpretation}')
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print('\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –°–ï–ì–ú–ï–ù–¢–û–í:')
    print('-' * 70)
    comparison = []
    for segment_id in sorted(df['segment'].unique()):
        segment_data = df[df['segment'] == segment_id]
        comparison.append({
            '–°–µ–≥–º–µ–Ω—Ç': segment_id,
            '–†–∞–∑–º–µ—Ä': len(segment_data),
            '–î–æ–ª—è %': f"{len(segment_data)/len(df)*100:.1f}%",
            '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫': f"{segment_data['avg_amount'].mean():.0f}",
            '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏': f"{segment_data['tx_count'].mean():.0f}",
            'Digital %': f"{segment_data['digital_wallet_ratio'].mean()*100:.1f}%",
            '–í—ã—Ä—É—á–∫–∞ –º–ª—Ä–¥': f"{segment_data['total_amount'].sum()/1e9:.3f}"
        })
    
    comparison_df = pd.DataFrame(comparison)
    print(comparison_df.to_string(index=False))
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    print('\nüéØ –û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:')
    print('1. –°–µ–≥–º–µ–Ω—Ç 4 (Mass Market) - –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç —Å 96.6% –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ 99.5% –≤—ã—Ä—É—á–∫–∏')
    print('2. Outliers (—Å–µ–≥–º–µ–Ω—Ç -1) - 2.6% –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –Ω–µ—Ç–∏–ø–∏—á–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º')
    print('3. –°–µ–≥–º–µ–Ω—Ç—ã 0-3 - –º–∏–∫—Ä–æ-—Å–µ–≥–º–µ–Ω—Ç—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏')
    print('4. –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –ø–æ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏, —Ä–∞–∑–º–µ—Ä—É —á–µ–∫–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')

if __name__ == "__main__":
    analyze_detailed_segments() 