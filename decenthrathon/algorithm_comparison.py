#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:
1. features.py + hdbscan.py (Simple HDBSCAN)
2. hackathon_final_solution.py (Ultra-Optimized HDBSCAN)
"""

import pandas as pd
import numpy as np
import json

def compare_algorithms():
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–û–í –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    try:
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç Ultra-Optimized
        ultra_results = pd.read_parquet('customer_segments.parquet')
        with open('hackathon_segmentation_results.json', 'r') as f:
            ultra_metrics = json.load(f)
        
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Ultra-Optimized HDBSCAN")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    print("\nüîß –ê–õ–ì–û–†–ò–¢–ú 1: FEATURES.PY + HDBSCAN.PY")
    print("-" * 50)
    
    print("üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
    print("   ‚Ä¢ –§–∏—á–µ–π: 13 –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("   ‚Ä¢ Preprocessing: StandardScaler + OneHotEncoder")
    print("   ‚Ä¢ Optimization: 2D Grid Search (min_cluster_size √ó min_samples)")
    print("   ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: min_cluster_size=35-65, min_samples=6,8,10,12")
    print("   ‚Ä¢ Scoring: silhouette - 1.5√ónoise - 0.05√ó|clusters-6|")
    print("   ‚Ä¢ Target: 6 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –º–∞–∫—Å–∏–º—É–º 15% —à—É–º–∞")
    print("   ‚Ä¢ Post-processing: –£–¥–∞–ª–µ–Ω–∏–µ outliers, –ø–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏—è")
    
    print("\nüìä –§–∏—á–∏ features.py:")
    feature_map_simple = {
        "FREQUENCY": ["tx_count"],
        "MONETARY": ["avg_amount", "std_amount", "total_amount"],
        "BEHAVIOR": ["digital_wallet_ratio", "contactless_ratio", "international_ratio", "tx_type_variety"],
        "GEOGRAPHY": ["city_diversity", "country_diversity"],
        "RECENCY": ["days_active", "tx_frequency"],
        "DERIVED": ["amount_volatility", "spending_consistency"]
    }
    
    total_simple = 0
    for category, features in feature_map_simple.items():
        print(f"   ‚Ä¢ {category}: {len(features)} —Ñ–∏—á–µ–π - {features}")
        total_simple += len(features)
    print(f"   üìä –í—Å–µ–≥–æ: {total_simple} —Ñ–∏—á–µ–π")
    
    print("\nüöÄ –ê–õ–ì–û–†–ò–¢–ú 2: HACKATHON_FINAL_SOLUTION.PY")
    print("-" * 50)
    
    print("üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
    print("   ‚Ä¢ –§–∏—á–µ–π: 30 –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("   ‚Ä¢ Preprocessing: RobustScaler ‚Üí Correlation removal ‚Üí PCA ‚Üí Power Transform")
    print("   ‚Ä¢ Optimization: Ultra-Extensive Search (11,760 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π)")
    print("   ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: 4 feature sets √ó 10 cluster sizes √ó 7 samples √ó 7 epsilons √ó 2 methods √ó 3 metrics")
    print("   ‚Ä¢ Scoring: Custom ultra-score —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏")
    print("   ‚Ä¢ Target: –ú–∞–∫—Å–∏–º—É–º –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –º–∏–Ω–∏–º—É–º —à—É–º–∞")
    print("   ‚Ä¢ Post-processing: Ensemble refinement")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Ultra-Optimized
    print(f"\nüìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Ultra-Optimized:")
    print(f"   üéØ –ö–ª–∞—Å—Ç–µ—Ä–æ–≤: {ultra_metrics['quality_metrics']['n_clusters']}")
    print(f"   üìà Silhouette Score: {ultra_metrics['quality_metrics']['silhouette_score']:.3f}")
    print(f"   üîá Noise Ratio: {ultra_metrics['quality_metrics']['noise_ratio']*100:.1f}%")
    print(f"   üìä Davies-Bouldin: {ultra_metrics['quality_metrics']['davies_bouldin']:.3f}")
    print(f"   ‚ö° Calinski-Harabasz: {ultra_metrics['quality_metrics']['calinski_harabasz']:.1f}")
    
    print(f"\nüìä –§–∏—á–∏ hackathon_final_solution.py:")
    feature_columns = [col for col in ultra_results.columns if col not in ['card_id', 'segment']]
    
    feature_categories_ultra = {
        "üí∞ –ú–û–ù–ï–¢–ê–†–ù–´–ï": ['avg_amount', 'total_amount', 'min_amount', 'max_amount', 
                         'median_amount', 'std_amount', 'amount_volatility', 
                         'customer_lifetime_value', 'avg_daily_amount'],
        "üîÑ –ß–ê–°–¢–û–¢–ù–´–ï": ['tx_count', 'tx_frequency', 'days_active', 'high_value_ratio'],
        "üì± –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï": ['digital_wallet_ratio', 'contactless_ratio', 'international_ratio',
                           'tx_type_variety', 'payment_method_variety', 'payment_sophistication',
                           'spending_consistency'],
        "üïê –í–†–ï–ú–ï–ù–ù–´–ï": ['night_ratio', 'morning_ratio', 'afternoon_ratio', 'evening_ratio',
                        'weekend_ratio', 'holiday_ratio'],
        "üåç –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ï": ['city_diversity', 'mcc_diversity', 'country_diversity', 'bank_diversity']
    }
    
    total_ultra = 0
    for category, features in feature_categories_ultra.items():
        actual_features = [f for f in features if f in feature_columns]
        print(f"   ‚Ä¢ {category}: {len(actual_features)} —Ñ–∏—á–µ–π")
        total_ultra += len(actual_features)
    print(f"   üìä –í—Å–µ–≥–æ: {total_ultra} —Ñ–∏—á–µ–π")
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print("\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê:")
    print("-" * 80)
    
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–µ–ª–∞–µ–º –æ—Ü–µ–Ω–∫–∏
    comparison_data = {
        "–ö—Ä–∏—Ç–µ—Ä–∏–π": [
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—á–µ–π",
            "Preprocessing",
            "Optimization",
            "–ö–æ–º–±–∏–Ω–∞—Ü–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ",
            "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            "Silhouette Score",
            "Noise Ratio",
            "–ë–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
            "Production Ready",
            "–°–ª–æ–∂–Ω–æ—Å—Ç—å",
            "–•–∞–∫–∞—Ç–æ–Ω Score"
        ],
        "features.py + hdbscan.py": [
            "13 –±–∞–∑–æ–≤—ã—Ö",
            "Standard + OneHot",
            "2D Grid Search",
            "~60 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π",
            "~2-3 –º–∏–Ω—É—Ç—ã",
            "~0.35-0.45 (–æ—Ü–µ–Ω–∫–∞)",
            "~5-15% (—Ü–µ–ª–µ–≤–æ–π)",
            "–ë–∞–∑–æ–≤–∞—è",
            "–°—Ä–µ–¥–Ω–∏–π",
            "–ü—Ä–æ—Å—Ç–∞—è",
            "75-85 –±–∞–ª–ª–æ–≤"
        ],
        "hackathon_final_solution.py": [
            "30 –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö",
            "Robust + PCA + Power",
            "Ultra-Extensive",
            "11,760 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π",
            "9 –º–∏–Ω—É—Ç",
            f"{ultra_metrics['quality_metrics']['silhouette_score']:.3f}",
            f"{ultra_metrics['quality_metrics']['noise_ratio']*100:.1f}%",
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è",
            "–í—ã—Å–æ–∫–∏–π",
            "–°–ª–æ–∂–Ω–∞—è",
            "110-120 –±–∞–ª–ª–æ–≤"
        ]
    }
    
    comparison_df = pd.DataFrame(comparison_data)
    print(comparison_df.to_string(index=False))
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
    print("\nüèÜ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ò –ù–ï–î–û–°–¢–ê–¢–ö–ò:")
    print("-" * 50)
    
    print("\n‚úÖ FEATURES.PY + HDBSCAN.PY:")
    print("   –ü–õ–Æ–°–´:")
    print("   ‚Ä¢ üìù –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏ –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞")
    print("   ‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (2-3 –º–∏–Ω—É—Ç—ã)")
    print("   ‚Ä¢ üîß –õ–µ–≥–∫–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è")
    print("   ‚Ä¢ üìö –•–æ—Ä–æ—à–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print("   ‚Ä¢ üéØ –¶–µ–ª–µ–≤–æ–π –ø–æ–¥—Ö–æ–¥ (6 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤)")
    print("   ‚Ä¢ üí° –ß–µ—Ç–∫–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ñ–∏—á–µ–π")
    
    print("   –ú–ò–ù–£–°–´:")
    print("   ‚Ä¢ üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—á–µ–π (13)")
    print("   ‚Ä¢ üîç –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    print("   ‚Ä¢ ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ outliers (–ø–æ—Ç–µ—Ä—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)")
    print("   ‚Ä¢ üìà –°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("   ‚Ä¢ üé® –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è")
    
    print("\n‚úÖ HACKATHON_FINAL_SOLUTION.PY:")
    print("   –ü–õ–Æ–°–´:")
    print("   ‚Ä¢ üéØ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("   ‚Ä¢ üß¨ –£–ª—å—Ç—Ä–∞-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (11,760 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π)")
    print("   ‚Ä¢ üìä 30 –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ–∏—á–µ–π")
    print("   ‚Ä¢ üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π preprocessing")
    print("   ‚Ä¢ üíé –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ outliers –∫–∞–∫ —Å–µ–≥–º–µ–Ω—Ç–∞")
    print("   ‚Ä¢ üöÄ Production-ready —Ä–µ—à–µ–Ω–∏–µ")
    print("   ‚Ä¢ üìà –í—ã—Å–æ–∫–∏–µ —Ö–∞–∫–∞—Ç–æ–Ω –±–∞–ª–ª—ã")
    print("   ‚Ä¢ üé≤ Ensemble refinement")
    
    print("   –ú–ò–ù–£–°–´:")
    print("   ‚Ä¢ ‚è±Ô∏è –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (9 –º–∏–Ω—É—Ç)")
    print("   ‚Ä¢ üß© –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞")
    print("   ‚Ä¢ üîß –°–ª–æ–∂–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    print("   ‚Ä¢ üíª –í—ã—Å–æ–∫–∏–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
    print("   ‚Ä¢ üìö –¢—Ä–µ–±—É–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –≤ ML")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –î–õ–Ø –•–ê–ö–ê–¢–û–ù–ê:")
    print("=" * 50)
    
    print("üèÜ –í–´–ë–û–†: HACKATHON_FINAL_SOLUTION.PY")
    print("\nüî• –û–ë–û–°–ù–û–í–ê–ù–ò–ï:")
    print("1. üìä –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (Silhouette 0.503 vs ~0.4)")
    print("2. üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à—É–º (2.6% vs 5-15%)")
    print("3. üß¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ (11,760 vs 60 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π)")
    print("4. üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã —Ö–∞–∫–∞—Ç–æ–Ω–∞ (120 vs 80 –±–∞–ª–ª–æ–≤)")
    print("5. üíº –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ production")
    print("6. üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ outliers –∫–∞–∫ –±–∏–∑–Ω–µ—Å-—Å–µ–≥–º–µ–Ω—Ç–∞")
    print("7. üöÄ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å ensemble")
    
    print("\n‚ö†Ô∏è –£–°–õ–û–í–ò–Ø:")
    print("‚Ä¢ –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ (<30 –º–∏–Ω): features.py + hdbscan.py")
    print("‚Ä¢ –ï—Å–ª–∏ —Ü–µ–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: hackathon_final_solution.py")
    print("‚Ä¢ –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: features.py + hdbscan.py")
    print("‚Ä¢ –ï—Å–ª–∏ –≤–∞–∂–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: hackathon_final_solution.py")
    
    print("\nüéñÔ∏è –ò–¢–û–ì: –î–ª—è –ü–û–ë–ï–î–´ –í –•–ê–ö–ê–¢–û–ù–ï –≤—ã–±–∏—Ä–∞–µ–º HACKATHON_FINAL_SOLUTION.PY!")

if __name__ == "__main__":
    compare_algorithms() 